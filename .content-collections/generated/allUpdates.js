
export default [
  {
    "title": "Elden Ring and My Engineering Ways",
    "description": "Elden ring was one of the best game i ever played. And it actually changed my perspective about engineering and i didn't expect that came from games.",
    "tag": "Thoughts",
    "date": new Date("2024-10-25T00:00:00.000Z"),
    "content": "import RykardImage from '@/assets/updates/elden-ring-and-my-engineering-way/rykard.png';\n\n## PC and First Story Game Experiences\n\nPC was the best thing that has ever come to my life so far. It can increase my productivity for working and studying. It also introduces me to a better gaming experience than mobile gaming (that \"mobile legend\" players have another level of banter). Which i never imagined how this gaming experience would change my perspective on software engineering\n\nI bought my first game from Epic Games (which i deeply regret to this day (you should buy from Steam folks)) titled \"Red Dead Redemption 2\". When i bought RDR 2 I had thought to refund it, but suddenly (or just \"path of Destiny\") i forgot to close the game and went outside for 4 hours and came back with the reality i could not refund this game and was forced to play RDR2.\n\nWhen i try RDR2 as my first story game, i feel its kinda boring. But, that's where I went wrong. When i play it for 2 hours a day i really love it and feel discouraged when not playing it in a day. This game has so many things to explore, the nature, resources, characters, NPC, etc feel so alive, I can't imagine how in hell i had thought to refund it before and then played hundreds of times on this game. Had to say, playing RDR2 for the first time was a mistake because i can't enjoy other story games, i have tried Assassin's Creed, Spider-Man, The Witcher, Horizon, etc, but, nothing can give me the same fun and feeling as RDR2.\n\nBut one day, i saw sales on Steam for Elden Ring I heard about it from social media and many people talked about it, so i thought why don't I give a try for this? My first impression of Elden Ring is great, it had a beautiful landscape, many items that i can explore, a great story, and fcking insane enemies. You didn't hear it wrong, those enemies were insane and you need to be patient, good at reflexes, and many more to face the enemies in Elden Ring. You can't use the same build with one boss to another boss, you need to mix and match the items to get more damage and win. In the first week, i felt this game was not for me because it was too hard and i couldn't spare my time just for dying to enemies every day. But, when losing i started to read the walkthrough from [Elden Ring Wiki](https://eldenring.wiki.fextralife.com/Elden+Ring+Wiki), i started to learn how the enemies attack and defend so i can be fighting with that knowledge and ***git good*** every day. I started to learn about bosses, items, and enemies' lore, how they became so strong, and who the hell they were.\n\n## Lores, Stories, and Reading Comprehension\n\nElden Ring came with a great story but we need to explore it by ourselves by reading through Wiki or [video](https://www.youtube.com/@VaatiVidya). I spent my free time exploring every resource about Elden Ring and it became part of my life everyday i found something interesting that i never thought of.\n\nThis kind of exploring lore and stories leads me to better reading comprehension. I started to like reading things outside Elden Ring and started to read specific things for my job like code documentation, code bases, engineering books, etc.\n\nPreviously, i was not a \"dive deeper person\" who always learned specific things from scratch. I am a person who prefers to trial and error by directly creating some real projects which is not recommended because when we start projects we must understand how and why a thing happens and we cannot know that thing without reading documentation.\n\nAs i explored more about Elden Ring my level of enjoyment for reading increased as well, i started to read more books from my office books catalog and i can enjoy that reading activity more than before. I also could find better solutions for the problems that i faced while coding by just reading the documentation without asking AI or Stack Overflow.\n\n## Elden Ring Build and Its Implications for Problem-Solving\n\nWhile playing Elden Ring you will be faced with different types of bosses, they have different move sets, weaknesses, strengths, etc. You mostly should have more than one build to face those bosses by changing your weapons, great rune, incantation, sorceries, or by just changing your build level by using *larval tear*. This leads me to be better at problem-solving by *orchestrating* any resources that i have to solve my problem when coding for office projects or on my projects.\n\nWith experience in modifying and combining multiple builds, weapons, talismans, etc, i can easily maintain multiple projects with multiple tech stacks by implementing discipline as when modifying and combining builds on Elden Ring. I just realized when trying something we don't need to be perfect first, we can just throw a \"trash\" solution that works and we could reiterate our solutions before with a better approach so it can be worked and perfect at the same time. Same as when trying to combine builds on Elden Ring, we can just try to mix and match builds even though with silly weapons, talismans, etc (sometimes it can worked tho) and go to the boss room to fight them and when it fails then it needs more adjustment.\n\n## Never Give Up!!!\n\nElden Ring was the hardest game I've been played, the enemies and bosses are insane i can just stuck at one boss for 2 days. Every boss has different move sets, skills, and difficulty. At some bosses, you can die 1-2 times only, but at different bosses, you can die more than hundreds of times and start to lose your sanity when fighting them. I'd died from Malenia 78 times before I could win and honestly, it was the best thing that happened that day when I finally defeated Malenia.\n\nWhen building applications, we often face bugs in our codes, it can be bugs that we already faced before or bugs we never faced. Fixing bugs today already become easier, with the bits of help from AI we can just type little prompts to fix our bugs. But, sometimes it could be harder when the bugs were edge cases that we never saw and Stack Overflow doesn't have resources/solutions for those bugs it became more difficult to fix, however, these types of bugs will reward us with satisfaction after we finally fixed it same as when we fighting bosses on Elden Ring.\n\n## Conclusion\n\nPlaying Elden Ring and Programming can be difficult, but sometimes when we already know \"what and how is going on\" it can be fascinating in the end. And that is the reason why I spend time playing these games, learning about characters, stories, and lore.\n\nI think playing Elden Ring was a funny way to improve my software engineering skills by connecting things.\n\nI hope you can find some ways to be a better software engineer without burning out yourselves.\n\nAnd togethaaa\n\n<Image src={RykardImage} alt=\"Rykard\" />",
    "_meta": {
      "filePath": "elden-ring-and-my-engineering-way.mdx",
      "fileName": "elden-ring-and-my-engineering-way.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "elden-ring-and-my-engineering-way"
    }
  },
  {
    "title": "Web Development with Progressive Enhancement",
    "description": "Implementing progressive enhancement in web development to improve backward compatibility and accessibility for your beloved website.",
    "tag": "Web Technologies",
    "date": new Date("2024-11-01T00:00:00.000Z"),
    "content": "import { FormSandpack } from \"@/components/contents/updates/web-development-with-progressive-enhancement/FormSandpack\";\nimport ProgressiveEnhancementLayerImage from \"@/assets/updates/web-development-with-progressive-enhancement/progressive-enhancement-layers.png\";\n\nHave you ever opened some website, but it doesn&lsquo;t work on your ancient devices? It&lsquo;s kinda stressful isn&lsquo;t it when you try surfing on the internet you need to spend your money to buy a new device first. Well, if you feel that way, when building a website you need to pay attention to backward compatibility, so more users can use your websites smoothly without a problem. And that's where you need progressive enhancement when building websites for more accessibility and backward compatibility.\n\n## Progressive Enhancement\n\nQuoted from [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement) :\n\n> Progressive enhancement is a design philosophy that provides a baseline of essential content and functionality to as many users as possible, while delivering the best possible experience only to users of the most modern browsers that can run all the required code.\n\nThis means that with progressive enhancement, we can improve user experience regardless of their user agent. So, although the user opens it from IE 1, it can still work fine, with some features probably reduced (but what kind of psycho is using IE in this economy?).\n\nAs a web developer, we usually decide which baseline for the users of our websites, so we can easily maintain what kind of features we can deliver to our users baseline and the features we can&lsquo;t.\n\n### Why is Progressive Enhancement Important?\n\nProgressive enhancement is important when you are targeting a wider user base for your websites and want them to be accessible to older browser versions, and that should be your default approach when building websites, tho.\n\nWith that in mind, your websites can visited by any users from any background and maybe can increase your sales from specific customers. Customers with old browsers, customers with old devices, etc. Because, sometimes we never know where our customers come from, what are their economic condition, what are their internet speed and what are their special conditions they had.\n\n**_But, isn't it like we're making bad assumptions about the user's browser?_**\n\nAlthough the progressive enhancement objective is to improve backward compatibility and accessibility, we don&lsquo;t make assumptions or presume anything about our users. We just make sure our website still works fine in old browsers and has all the features available in modern browsers without sacrificing users' experience with old browsers.\n\n### When Should I Care About Progressive Enhancement\n\nWell, progressive enhancement is not a technology it&lsquo;s more about the developer's approach when building websites, you can choose to care about it or not but, I really recommend you to use it when creating a website. Specifically, when you are trying to target more customer/user base for your websites, this approach will help you with that.\n\n## Difference with Graceful Degradation\n\nWhen you were learning progressive enhancement, you will likely introduce to graceful degradation also. It has almost same philosophy with progressive enhancement, the differences are while with progressive enhancement we as a developer starting from basic and functional version of website first and then add more advanced features for modern web browsers and devices that support them, the graceful degradation _dictates_ us to start from most advanced features for modern browsers and devices and add supports for less capable browsers or devices version by “degrading” certain features as needed.\n\nSo, by that explanation before, progressive enhancement is a bottom-up approach to web development while the graceful degradation is a top-down approach. You can be using progressive enhancement and graceful degradation at the same time to complement each other while building websites.\n\n## Progressive Enhancement Layers\n\n<Image\n  src={ProgressiveEnhancementLayerImage}\n  alt=\"Progressive Enhancement Layers\"\n/>\n\nIn that image, we can see we have 3 layers of progressive enhancement which is HTML, CSS and JavaScript. Those layers play important part for progressive enhancement and have different specification on each layer.\n\n### HTML\n\nHTML is the first layer of progressive enhancement, which has the largest support on any browsers. You can deliver your website with HTML in almost every browser (with some of the element have constrained for availability in some browser version).\n\nHTML is a starting point when we're implementing progressive enhancement in our website, it is important because you need HTML to build your website layout and structure.\n\n### CSS\n\nYou absolutely can build your website with only HTML, but in the ideal world your website should be having styles, and you MUST style your website damn it.\n\nWhen it comes to CSS, we start to face compatibility issues more often. It&lsquo;s because there is larger new CSS features that comes recently than HTML, for example: [`@container` at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) that released in 2023 and only supported by few browsers at the moment. But, CSS have [`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) which give us some flexibility to choose which selector, properties and functions supported by browsers and the fallback when it doesn't.\n\nThe `@supports` rule is similar to media query but used as “feature detection” in CSS. You can using operators like `and`, `not`, and `or` even the CSS variables.\n\nFor example, you can check the support of grid with this code:\n\n```css\n@supports (display: grid) {\n  .container {\n    display: grid;\n  }\n}\n```\n\nOr, you want to check if the grid property doesn’t exist and the flex property is available:\n\n```css\n@supports (display: flex) and (not (display: grid)) {\n  .container {\n    display: flex;\n  }\n}\n```\n\n### JavaScript\n\nFinally, we have the last part of the progressive enhancement layers, which is JavaScript. This is the most tricky part when implementing progressive enhancement because JavaScript API supports varies from browser-to-browser even though browser with same engine like edge and chrome.\n\nSome people think when we implement progressive enhancement we cannot be using JavaScript at all, because they think JavaScript will be disabled by users most of the time, but disabling JavaScript is not a simple way by a regular user who doesn&lsquo;t understand how JavaScript works. Even though, we need to define baseline for our website how they behave when JavaScript enabled or disabled.\n\n## Fallback and Backward Compatibility\n\nOkay, but how we can make sure our users have the same experience even though they are using an old browser or device?\n\nThe answer to that question is **_fallback._** Fallback is a substitute or alternative solution that ensures a feature or content is still available to users if the preferred or advanced version cannot be used.\n\nThis snippet showing how we maintain form compatibility when implementing progressive enhancement :\n\n<FormSandpack />\n\nAs you can see in that playground we have two files that create basic forms with React.JS. Nothing special, just a basic form with styling but I added some conditions to support more backward compatibility :\n\n- In the `App.tsx` the default behavior for the form is to directly call the POST endpoint without interference from JavaScript itself so it can still work even on older browsers. But, I added a condition to make the form submitted by JavaScript with `fetch` API so you can validate or manipulate data when the user submits the form. You can comment/uncomment on line 11 to see how to form behavior with and without `fetch` API.\n- Moving to `App.module.css` I created basic CSS styling with the gap on each input and button. To create the gap I used `subsequent-sibling combinator` by default to support older browsers and then I added the `@supports` rule so when the user browser supports flex I&lsquo;ll use it instead.\n\nThat snippet only shows the basic part of progressive enhancement in React, you can explore by yourself by creating a new website project with progressive enhancement with/without UI library.\n\n## Conclusion\n\nProgressive enhancement is a great approach when you want to expand your user base and keep the accessibility of your website. But, you&lsquo;re free to decide whether to implement this approach or not considering its pros and cons.\n\nAt the end of the day, we always wanna build a website that works fine for all of our users, but we cannot restrict how our users use our website or what their browser or device version is. So, the best we can do right now is to minimize the problem even though our users used resources with limited support to our website.",
    "_meta": {
      "filePath": "web-development-with-progressive-enhancement.mdx",
      "fileName": "web-development-with-progressive-enhancement.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "web-development-with-progressive-enhancement"
    }
  },
  {
    "title": "Website Refresh 2024",
    "description": "Feeling energized to write a new article but not happy with my old design, so here's a new design with a simpler, less overengineered tech stack.",
    "tag": "Introduction",
    "date": new Date("2024-10-25T00:00:00.000Z"),
    "content": "## UPDATE Aug 2025\nI moved back to NextJS lol!\n\n2024 passed quickly and my lust for overengineering returned. I was getting bored with my old website design which designed 2 years ago by myself. Back then, i build my website with NextJS with [Contentlayer](https://contentlayer.dev/) as my content SDK. One year after that, my office introduce me with Go which i loved it. The simplicity, more type safety and the speed of Go make me wanna to learn more about this langugage. And so, i tempted to create something with Go; Naturally, the first thing that came to mind was, \"Let's rewrite the website in Go!\" (Because who doesn’t love a good rewrite, right?). After two months of \"development\" (read: playing games), I finally rewrote the site using my very limited knowledge of Go.\n\nThen, in 2024, I tried Astro, which is a competitor to NextJS, and wow—this thing is pure magic. It seriously boosted my workflow, and I knew I had to rewrite my website in Astro too. But this time, I didn’t just want to rewrite it; I wanted to refresh the design as well.\n\nHere's what i wanted from my new website designs :\n- Minimal: Easy to maintain and easy to create\n- Bold: Make the website more stands out with big font (or whatever it is)\n- BROWN: This is the breaking changes from previous version of my website which only black and white (booooring)\nWith that in mind, i began for adventure to searching inspiration\n\n## What Inspired Me\nI'm spent time to research some of inspirations on the websites like [Godly](https://godly.website). Here some of the websites that used for my inspirations :\n- [Ana Cuna](https://anacuna.com)\n- [Leonid Kostetskyi](https://leonidkostetskyi.com)\n- [Artem Militonian](https://artmilitonian.com)\n- [Giulia Saporito](https://giuliasaporito.com)\n\n## Putting it Together\nAfter adventuring from one website to another, i cherry-picked some components and mixed them together. i settled on Anton and Satoshi(fr) as the main fonts and went all in on brown as the primary color. I add some animation for revealing heading text for my website so it can feel more life for the users.\n\n## Tech Stacks\nI choosed these stacks because i love the simplicity and scalability\n\n- Framework: Astro\n- UI Library: React JS\n- Animation Library: Framer Motion\n- Runtime: Bun\n- Hosting: Vercel\n\n## How It's Build\nIt took many days to build this website because i have to work on some projects at my office that make me highly focused to those project and \"abandoning\" this website.\n\n1. Initialize Project: I starting this website refresh development on September by initialize the project with installing some essentials libraries and decide which library/tools should be used\n2. Layouting: After initialize the project, i began to create layout, i wanna to make this website simple so i dont want to add unnecessary element for the layout and annoying my visitor. So, i breakdown it to header, main content and the footer.\n3. Header Layout: First thing first i create header without interesting contents, only logo (just letter A.) and the main site navigation. On my first iteration, i decided to make it sticky but i think it can be annoying when you scrolling down and see big element covering content so i revert it and make it static instead (just a good-hearted header :D)\n3. Home Page: This is the most time-consuming part on this development; Most of the time i spend my time by researching and some \"trial and error\" to build most suitable interface by mix and match my inpirations before. I just create 4 sections on my home page which is hero (just basic reveal text transition), latest works (i need to organize all of my projects fr), tech stacks and the latest articles (showing latest 10 articles on this website).\n4. Footer: Nothing special here just same content with header and one text transition with my name (i found this from my X timeline).\n5. Single Page: After finished on home page, i moving on to the single page design, it used for article and page detail or other markdown data. Just install `@tailwindcss/typography` and leave it to them to style my single page (with a few custom tweaks here and there).\n\n## Thats it\nI open-sourced the code, so feel free to fork it, play around with it, or maybe even contribute. Who knows? xD",
    "_meta": {
      "filePath": "website-refresh-2024.mdx",
      "fileName": "website-refresh-2024.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "website-refresh-2024"
    }
  }
]