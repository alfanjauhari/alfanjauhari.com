---
import { ClientRouter } from 'astro:transitions'

interface Props {
  title: string
  description: string
  // biome-ignore lint/suspicious/noExplicitAny: Astro props can be any type
  children?: any
}

const { title, description } = Astro.props

const type = Astro.url.pathname.includes('/blog/') ? 'blog' : 'page'
const slug = Astro.url.pathname.replace(/\/$/, '').split('/').pop()
---

<head>
  <title>{title}</title>

  <meta name="description" content={description} />

  <meta property="og:title" content={title} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={Astro.url} />

  <meta name="twitter:card" content="summary_large_image" />
  <meta property="twitter:domain" content={Astro.site} />
  <meta property="twitter:url" content={Astro.url} />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />

  <ClientRouter />

  {
    Astro.url.pathname !== "/" ? (
      <Fragment>
        <meta
          name="twitter:image"
          content={`${Astro.url.origin}/api/og-image/${type}/${slug}.png`}
        />
        <meta
          property="og:image"
          content={`${Astro.url.origin}/api/og-image/${type}/${slug}.png`}
        />
      </Fragment>
    ) : (
      <Fragment>
        <meta
          name="twitter:image"
          content={`${Astro.url.origin}/api/og-image/global.png`}
        />
        <meta
          property="og:image"
          content={`${Astro.url.origin}/api/og-image/global.png`}
        />
      </Fragment>
    )
  }

  <link rel="icon" type="image/x-icon" href="/images/favicon.webp" />

  <link
    rel="preload"
    href="/fonts/Anton400.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link
    rel="preload"
    href="/fonts/Satoshi-Variable.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link
    rel="preload"
    href="/fonts/Satoshi-VariableItalic.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />

  <script>
    import Lenis from "lenis";
    import "lenis/dist/lenis.css";

    const lenis = new Lenis({
      prevent: (node) => node.classList?.contains("prevent-lenis"),
    });

    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);
  </script>

  <script is:inline>
    !(function (t, e) {
      var o, n, p, r;
      e.__SV ||
        ((window.posthog = e),
        (e._i = []),
        (e.init = function (i, s, a) {
          function g(t, e) {
            var o = e.split(".");
            (2 == o.length && ((t = t[o[0]]), (e = o[1])),
              (t[e] = function () {
                t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
              }));
          }
          (((p = t.createElement("script")).type = "text/javascript"),
            (p.crossOrigin = "anonymous"),
            (p.async = !0),
            (p.src =
              s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") +
              "/static/array.js"),
            (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(
              p,
              r
            ));
          var u = e;
          for (
            void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
              u.people = u.people || [],
              u.toString = function (t) {
                var e = "posthog";
                return (
                  "posthog" !== a && (e += "." + a),
                  t || (e += " (stub)"),
                  e
                );
              },
              u.people.toString = function () {
                return u.toString(1) + ".people (stub)";
              },
              o =
                "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(
                  " "
                ),
              n = 0;
            n < o.length;
            n++
          )
            g(u, o[n]);
          e._i.push([i, s, a]);
        }),
        (e.__SV = 1));
    })(document, window.posthog || []);
    posthog.init("phc_KeY21whxdcbBmnTSzCycCdPjHYyfV6a9wMPvgtSEGJt", {
      api_host: "https://us.i.posthog.com",
      person_profiles: "identified_only", // or 'always' to create profiles for anonymous users as well
    });
  </script>
</head>
